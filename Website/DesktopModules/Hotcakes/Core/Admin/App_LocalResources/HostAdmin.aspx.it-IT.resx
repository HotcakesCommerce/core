<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnClearCache.Text" xml:space="preserve">
    <value>Pulisci Cache</value>
  </data>
  <data name="CacheCleared.Text" xml:space="preserve">
    <value>Cache cancellata a {0}</value>
  </data>
  <data name="CacheInfo.Text" xml:space="preserve">
    <value>Cancellare la cache può aiutarti a risolvere i problemi quando salvi le modifiche ma non necessariamente vedi le modifiche mostrate nel tuo negozio.</value>
  </data>
  <data name="chkDeleteModuleFiles.Text" xml:space="preserve">
    <value>Elimina i file del modulo</value>
  </data>
  <data name="chkDeleteStoreFiles.Text" xml:space="preserve">
    <value>Elimina i file del negozio</value>
  </data>
  <data name="HostAdministration.Text" xml:space="preserve">
    <value>Amministrazione Superutente</value>
  </data>
  <data name="UninstallInfo.Text" xml:space="preserve">
    <value>La disinstallazione rimuoverà tutti i moduli di Hotcakes dall'intera installazione del sito. Ciò interesserà tutti i siti nell'installazione. Tutti i dati saranno rimossi dal database. Questa operazione non è reversibile.</value>
  </data>
  <data name="btnUninstall.Text" xml:space="preserve">
    <value>Disinstalla</value>
  </data>
  <data name="UninstallConfirmation.Text" xml:space="preserve">
    <value>Sei sicuro di voler eliminare tutti i moduli e i file di Hotcakes Commerce?</value>
  </data>
  <data name="btnClearStoreData.Text" xml:space="preserve">
    <value>Elimina i dati del negozio</value>
  </data>
  <data name="CacheInfoTitle.Text" xml:space="preserve">
    <value>Cache del Negozio</value>
  </data>
  <data name="chkDeleteAnalytics.Text" xml:space="preserve">
    <value>Analytics</value>
  </data>
  <data name="chkDeleteCustomers.Text" xml:space="preserve">
    <value>Clienti</value>
  </data>
  <data name="chkDeleteOrders.Text" xml:space="preserve">
    <value>Ordini</value>
  </data>
  <data name="ClearStoreDataConfirmation.Text" xml:space="preserve">
    <value>L'eliminazione dei dati del negozio è un'azione permanente. Questo non può essere annullato. Sei sicuro di voler continuare?</value>
  </data>
  <data name="ClearStoreDataInfo.Text" xml:space="preserve">
    <value>Cancellare i dati del negozio è un'azione permanente. Se si sceglie di farlo, tutti i dati selezionati verranno cancellati per sempre. Questo dovrebbe essere necessario solo per i proprietari dei siti che stanno spostando il loro sito da un ambiente di sviluppo, in un ambiente di produzione.</value>
  </data>
  <data name="ClearStoreDataTitle.Text" xml:space="preserve">
    <value>Elimina i dati del negozio</value>
  </data>
  <data name="UninstallModuleTitle.Text" xml:space="preserve">
    <value>Disinstalla il modulo</value>
  </data>
  <data name="StoreDataDeletedMsg.Text" xml:space="preserve">
    <value>I dati del negozio selezionati sono stati correttamente eliminati</value>
  </data>
  <data name="SampleDataInfo.Text" xml:space="preserve">
    <value>I dati di esempio verranno generati per tutti i prodotti trovati nel negozio. Questo potrebbe richiedere un momento se hai un numero elevato di prodotti aggiunti. Quando elimini i dati di esempio, tutti i tuoi prodotti continueranno a esistere nel tuo negozio.</value>
  </data>
  <data name="SampleDataTitle.Text" xml:space="preserve">
    <value>Dati di esempio</value>
  </data>
  <data name="btnCreateSampleData.Text" xml:space="preserve">
    <value>Genera dati di esempio per il negozio</value>
  </data>
  <data name="btnRemoveSampleData.Text" xml:space="preserve">
    <value>Rimuovi i dati di esempio dal negozio</value>
  </data>
</root>